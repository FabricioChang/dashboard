{
  "version": 3,
  "sources": ["../../@mui/utils/esm/getReactElementRef/getReactElementRef.js", "../../@mui/utils/esm/HTMLElementType/HTMLElementType.js", "../../@mui/utils/esm/useSlotProps/useSlotProps.js", "../../@mui/material/esm/Portal/Portal.js"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\n/**\r\n * Returns the ref of a React element handling differences between React 19 and older versions.\r\n * It will throw runtime error if the element is not a valid React element.\r\n *\r\n * @param element React.ReactElement\r\n * @returns React.Ref<any> | null\r\n */\r\nexport default function getReactElementRef(element) {\r\n  // 'ref' is passed as prop in React 19, whereas 'ref' is directly attached to children in older versions\r\n  if (parseInt(React.version, 10) >= 19) {\r\n    return element?.props?.ref || null;\r\n  }\r\n  // @ts-expect-error element.ref is not included in the ReactElement type\r\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/70189\r\n  return element?.ref || null;\r\n}", "export default function HTMLElementType(props, propName, componentName, location, propFullName) {\r\n  if (process.env.NODE_ENV === 'production') {\r\n    return null;\r\n  }\r\n  const propValue = props[propName];\r\n  const safePropName = propFullName || propName;\r\n  if (propValue == null) {\r\n    return null;\r\n  }\r\n  if (propValue && propValue.nodeType !== 1) {\r\n    return new Error(`Invalid ${location} \\`${safePropName}\\` supplied to \\`${componentName}\\`. ` + `Expected an HTMLElement.`);\r\n  }\r\n  return null;\r\n}", "'use client';\r\n\r\nimport useForkRef from \"../useForkRef/index.js\";\r\nimport appendOwnerState from \"../appendOwnerState/index.js\";\r\nimport mergeSlotProps from \"../mergeSlotProps/index.js\";\r\nimport resolveComponentProps from \"../resolveComponentProps/index.js\";\r\n/**\r\n * @ignore - do not document.\r\n * Builds the props to be passed into the slot of an unstyled component.\r\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\r\n * If the slot component is not a host component, it also merges in the `ownerState`.\r\n *\r\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\r\n */\r\nfunction useSlotProps(parameters) {\r\n  const {\r\n    elementType,\r\n    externalSlotProps,\r\n    ownerState,\r\n    skipResolvingSlotProps = false,\r\n    ...other\r\n  } = parameters;\r\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);\r\n  const {\r\n    props: mergedProps,\r\n    internalRef\r\n  } = mergeSlotProps({\r\n    ...other,\r\n    externalSlotProps: resolvedComponentsProps\r\n  });\r\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.additionalProps?.ref);\r\n  const props = appendOwnerState(elementType, {\r\n    ...mergedProps,\r\n    ref\r\n  }, ownerState);\r\n  return props;\r\n}\r\nexport default useSlotProps;", "'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\r\nimport useForkRef from '@mui/utils/useForkRef';\r\nimport setRef from '@mui/utils/setRef';\r\nimport getReactElementRef from '@mui/utils/getReactElementRef';\r\nimport exactProp from '@mui/utils/exactProp';\r\nimport HTMLElementType from '@mui/utils/HTMLElementType';\r\nfunction getContainer(container) {\r\n  return typeof container === 'function' ? container() : container;\r\n}\r\n\r\n/**\r\n * Portals provide a first-class way to render children into a DOM node\r\n * that exists outside the DOM hierarchy of the parent component.\r\n *\r\n * Demos:\r\n *\r\n * - [Portal](https://mui.com/material-ui/react-portal/)\r\n *\r\n * API:\r\n *\r\n * - [Portal API](https://mui.com/material-ui/api/portal/)\r\n */\r\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, forwardedRef) {\r\n  const {\r\n    children,\r\n    container,\r\n    disablePortal = false\r\n  } = props;\r\n  const [mountNode, setMountNode] = React.useState(null);\r\n  const handleRef = useForkRef(/*#__PURE__*/React.isValidElement(children) ? getReactElementRef(children) : null, forwardedRef);\r\n  useEnhancedEffect(() => {\r\n    if (!disablePortal) {\r\n      setMountNode(getContainer(container) || document.body);\r\n    }\r\n  }, [container, disablePortal]);\r\n  useEnhancedEffect(() => {\r\n    if (mountNode && !disablePortal) {\r\n      setRef(forwardedRef, mountNode);\r\n      return () => {\r\n        setRef(forwardedRef, null);\r\n      };\r\n    }\r\n    return undefined;\r\n  }, [forwardedRef, mountNode, disablePortal]);\r\n  if (disablePortal) {\r\n    if (/*#__PURE__*/React.isValidElement(children)) {\r\n      const newProps = {\r\n        ref: handleRef\r\n      };\r\n      return /*#__PURE__*/React.cloneElement(children, newProps);\r\n    }\r\n    return children;\r\n  }\r\n  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes /* remove-proptypes */ = {\r\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\r\n  // │ These PropTypes are generated from the TypeScript type definitions. │\r\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\r\n  // └─────────────────────────────────────────────────────────────────────┘\r\n  /**\r\n   * The children to render into the `container`.\r\n   */\r\n  children: PropTypes.node,\r\n  /**\r\n   * An HTML element or function that returns one.\r\n   * The `container` will have the portal children appended to it.\r\n   *\r\n   * You can also provide a callback, which is called in a React layout effect.\r\n   * This lets you set the container from a ref, and also makes server-side rendering possible.\r\n   *\r\n   * By default, it uses the body of the top-level document object,\r\n   * so it's simply `document.body` most of the time.\r\n   */\r\n  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),\r\n  /**\r\n   * The `children` will be under the DOM hierarchy of the parent component.\r\n   * @default false\r\n   */\r\n  disablePortal: PropTypes.bool\r\n} : void 0;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  // eslint-disable-next-line\r\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\r\n}\r\nexport default Portal;"],
  "mappings": "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",
  "names": ["React", "Portal", "PropTypes"]
}
